import streamlit as st
from PIL import Image
import json
import torch
import torch.nn as nn
import time
from torchvision import io
from torchvision import transforms as T
from torchvision.models import resnet34, ResNet34_Weights
from torch.nn import functional as F
import requests
from io import BytesIO

device = torch.device('cpu')
model = resnet34(weights=ResNet34_Weights.DEFAULT)
model.fc = nn.Linear(512, 1)
model.load_state_dict(torch.load('model_binary.pt', map_location=device))
model.to(device)

idx2class2 = {0: 'benign', 1: 'malignant'}

class_translation2 = {
    "benign": "–¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—É—Ö–æ–ª—å",
    "malignant": "–∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—É—Ö–æ–ª—å",
}

# with open("imagenet_class_index.json") as file:
#     labels = json.load(file)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è 
# def get_prediction(image):
#     transform = T.Compose([
#         T.Resize((224, 224)),
#         T.ToTensor(),
#     ])
#     image = transform(image).unsqueeze(0)
#     model.eval()
#     with torch.no_grad():
#         pred = torch.argmax(F.softmax(model(image)[0], dim=0)).item()
#         class_name = labels[str(pred)][1]
#     return class_name

def get_prediction(image):
    transform = T.Compose([
        T.Resize((224, 224)),
        T.ToTensor(),
    ])
    img = transform(image).unsqueeze(0).to(device)
    model.eval()
    start_time = time.time() # –°—Ç–∞—Ä—Ç –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ 

    with torch.no_grad():
        output = model(img)
        pred_class = torch.sigmoid(output).round().item()

        class_name = idx2class2[pred_class]
        class_translation = class_translation2[class_name]
        another_class_name = "malignant" if class_name == "benign" else "benign"
        another_class_translation = class_translation2[another_class_name]

        probabilities = torch.sigmoid(output)

        proba1 = torch.sigmoid(output).item() * 100 # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è
        proba2 = 100 - proba1 # –î–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ä–∞–≤–Ω–∞ 1 - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞

    end_time = time.time() # –ö–æ–Ω–µ—Ü –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ 
    elapsed_time = end_time - start_time # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ 
    
    if class_name == "benign":
        class_result = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {proba2:.3f}% {class_translation}"
        overall_result = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {another_class_translation} —Ä–∞–≤–Ω–∞ {proba1:.3f}%"
    else:
        class_result = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {proba1:.3f}% {class_translation}"
        overall_result = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {another_class_translation} —Ä–∞–≤–Ω–∞ {proba2:.3f}%"
    

    return class_result, elapsed_time, overall_result

st.write("## Skin Cancer Classification ü´∂")
st.sidebar.write("Choose application above")
st.markdown(
        """
        –≠—Ç–æ—Ç streamlit-—Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ü–µ–Ω–∏—Ç—å –¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–æ–∂–µ –ø–æ —Ñ–æ—Ç–æ\n
        *–ù–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º*üë©‚Äç‚öïÔ∏è
    """
)
button_style = """
    <style>
    .center-align {
        display: flex;
        justify-content: center;
    }
    </style>
"""
image_source = st.radio("Choose the option of uploading the image:", ("File", "URL"))

try:
    if image_source == "File":
        uploaded_files = st.file_uploader("Upload the image", type=["jpg", "png", "jpeg"], accept_multiple_files=True) 
        if uploaded_files:
            for uploaded_file in uploaded_files:
                image = Image.open(uploaded_file)
                st.image(image, caption="Uploaded image", use_column_width=True)
                if st.button(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è {uploaded_file.name}"):
                    predicted_class, elapsed_time, overall_result = get_prediction(image)
                    st.success(predicted_class)
                    st.success(overall_result)
                    st.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
    else:
        url = st.text_input("Enter the URL of image...")
        if url:
            response = requests.get(url)
            if response.status_code == 200:
                image = Image.open(BytesIO(response.content))
                st.image(image, caption="Uploaded image", use_column_width=True)
                if st.button(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å"):
                    predicted_class, elapsed_time, overall_result = get_prediction(image)
                    st.success(predicted_class)
                    st.success(overall_result)
                    st.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
except Exception as e:
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {str(e)}")

st.markdown(button_style, unsafe_allow_html=True)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∫–Ω–æ–ø–∫–µ
        